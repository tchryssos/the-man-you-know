{"version":3,"sources":["src/logic/elements.js","node_modules/ramda/src/internal/_isPlaceholder.js","node_modules/ramda/src/internal/_curry1.js","node_modules/ramda/src/internal/_curry2.js","node_modules/ramda/src/times.js","src/logic/constants.js","src/logic/drawShapes.js","src/logic/util.js","src/logic/styles.js","src/logic/math.js","src/logic/face.js","src/logic/names.js","src/main.js"],"names":["getWindowSizeScore","heightScore","widthScore","Math","window","innerWidth","innerHeight","min","canvas","document","getElementById","ctx","getContext","setCanvasSize","s","height","width","getCanvasSize","resizeCanvas","namePTag","nameForm","nameInput","standardLineWidth","drawEllipse","x","y","rX","rY","startAngle","endAngle","stroke","fill","drawCounterClockwise","beginPath","strokeStyle","fillStyle","ellipse","PI","drawCircle","r","arc","drawCurve","startX","startY","middleX","middleY","endX","endY","lineWidth","moveTo","quadraticCurveTo","drawLine","ax","ay","bx","by","lineTo","drawTriangle","cx","cy","fil","drawRectangle","w","h","rect","drawCross","vX","tY","bY","lX","hY","color","getRandomItem","array","floor","random","length","getRandomBetween","max","addAndRemoveClass","el","classString","time","classList","add","setTimeout","remove","getRandomColorString","letters","i","clamp","val","drawMouth","mouthYTop","mouthYBottom","mouthLX","mouthRX","mood","top","bot","teeth","mouthLength","n","drawNose","headCenter","noseTop","noseBottom","noseX","shape","bridgeBottom","tipShift","drawPupils","pupilRX","pupilLX","pupilY","pupilXRadius","pupilYRadius","pupilColor","style","getEllipsePoint","knownPointData","unknownPointData","hemisphere","kCoord","kCenter","kAxis","uCenter","uAxis","t2","sqrt","pow","getHead","canvasSize","headRadiusX","round","headRadiusY","skinColor","drawEyeEllipse","getEyes","eyeXRadius","eyeYRadius","eyeInnerBound","eyeOuterBound","eyeRX","eyeXOffset","maxEyeYOffset","eyeLX","eyeY","eyeYOffset","pupilInnerBound","pupilOutterBound","pupilXOffset","pupilYOffset","eyesClose","getMouth","mouthXLMax","mouthXRMax","mouthTop","mouthBottom","getNose","getHair","hairColor","hairWidth","hairDensity","forEach","startingLX","startingRX","createTheMan","clearRect","faceProps","defaultNames","vowels","weightedConsonants","consonants","map","c","selectableConstants","push","replaceLetter","letter","optionArray","replacement","toUpperCase","buildName","templateName","split","reduce","acc","cur","arr","indexOf","toLowerCase","join","name","textContent","addEventListener","e","preventDefault","seed","value"],"mappings":"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","file":"main.43309712.js","sourceRoot":"..","sourcesContent":["export const getWindowSizeScore = () => {\n\tlet heightScore = 0\n\tlet widthScore = 0\n\n\tif (window.innerWidth >= 600) {\n\t\twidthScore = 1\n\t}\n\tif (window.innerHeight >= 600) {\n\t\theightScore = 1\n\t}\n\n\tif (window.innerWidth >= 960) {\n\t\twidthScore = 2\n\t}\n\tif (window.innerHeight >= 700) {\n\t\theightScore = 2\n\t}\n\n\tif (window.innerWidth >= 1280) {\n\t\twidthScore = 3\n\t}\n\tif (window.innerHeight >= 900) {\n\t\theightScore = 3\n\t}\n\n\treturn Math.min(heightScore, widthScore)\n}\n\n// START - CANVAS - START\nexport const canvas = document.getElementById('face-canvas')\nexport const ctx = canvas.getContext('2d')\nexport const setCanvasSize = (s) => {\n\tcanvas.height = s\n\tcanvas.width = s\n}\nexport const getCanvasSize = () => canvas.height\nexport const resizeCanvas = () => {\n\tswitch (getWindowSizeScore()) {\n\t\tcase 1:\n\t\t\tsetCanvasSize(400)\n\t\t\tbreak\n\t\tcase 2:\n\t\t\tsetCanvasSize(500)\n\t\t\tbreak\n\t\tcase 3:\n\t\t\tsetCanvasSize(700)\n\t\t\tbreak\n\t\tdefault:\n\t\t\tsetCanvasSize(300)\n\t}\n}\n// END - CANVAS - END\n\n// START - NAME - START\nexport const namePTag = document.getElementById('name')\nexport const nameForm = document.getElementById('name-form')\nexport const nameInput = document.getElementById('seed-name')\n// END - NAME - END\n","function _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}\n\nmodule.exports = _isPlaceholder;","var _isPlaceholder =\n/*#__PURE__*/\nrequire(\"./_isPlaceholder\");\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\n\nfunction _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}\n\nmodule.exports = _curry1;","var _curry1 =\n/*#__PURE__*/\nrequire(\"./_curry1\");\n\nvar _isPlaceholder =\n/*#__PURE__*/\nrequire(\"./_isPlaceholder\");\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\n\nfunction _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}\n\nmodule.exports = _curry2;","var _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\n\n\nvar times =\n/*#__PURE__*/\n_curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n\n  list = new Array(len);\n\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n\n  return list;\n});\n\nmodule.exports = times;","export const standardLineWidth = 4\n","import { ctx } from '/src/logic/elements'\nimport { standardLineWidth } from '/src/logic/constants'\n\nexport const drawEllipse = (\n\tx,\n\ty,\n\trX,\n\trY,\n\tstartAngle,\n\tendAngle,\n\tstroke = '#fff',\n\tfill,\n\tdrawCounterClockwise = true,\n) => {\n\tctx.beginPath()\n\tctx.strokeStyle = stroke\n\tctx.fillStyle = fill\n\tctx.ellipse(\n\t\tx,\n\t\ty,\n\t\trX,\n\t\trY,\n\t\tMath.PI / 2,\n\t\tstartAngle,\n\t\tendAngle,\n\t\tdrawCounterClockwise,\n\t)\n\tctx.stroke()\n\tctx.fill()\n}\n\nexport const drawCircle = (x, y, r, stroke, fill) => {\n\tctx.beginPath()\n\tctx.strokeStyle = stroke\n\tctx.fillStyle = fill\n\tctx.arc(x, y, r, 0, 2 * Math.PI)\n\tctx.stroke()\n\tctx.fill()\n}\n\nexport const drawCurve = (\n\tstartX,\n\tstartY,\n\tmiddleX,\n\tmiddleY,\n\tendX,\n\tendY,\n\tfill = '#000',\n) => {\n\tctx.beginPath()\n\tctx.fillStyle = fill\n\tctx.strokeStyle = fill\n\tctx.lineWidth = standardLineWidth\n\tctx.moveTo(startX, startY)\n\tctx.quadraticCurveTo(middleX, middleY, endX, endY)\n\tctx.stroke()\n}\n\nexport const drawLine = (ax, ay, bx, by, stroke = '#000') => {\n\tctx.beginPath()\n\tctx.strokeStyle = stroke\n\tctx.lineWidth = standardLineWidth\n\tctx.moveTo(ax, ay)\n\tctx.lineTo(bx, by)\n\tctx.stroke()\n}\n\nexport const drawTriangle = (ax, ay, bx, by, cx, cy, fill = '#000') => {\n\tctx.beginPath()\n\tctx.fillStyle = fill\n\tctx.lineWidth = standardLineWidth\n\tctx.moveTo(ax, ay)\n\tctx.lineTo(bx, by)\n\tctx.lineTo(cx, cy)\n\tctx.fil\n}\n\nexport const drawRectangle = (x, y, w, h, stroke = '#000', fill) => {\n\tctx.beginPath()\n\tctx.fillStyle = fill\n\tctx.strokeStyle = stroke\n\tctx.lineWidth = standardLineWidth * 2\n\tctx.rect(x, y, w, h)\n\tctx.stroke()\n\tctx.fill()\n}\n\nexport const drawCross = (vX, tY, bY, lX, hY, rX, color) => {\n\tdrawLine(vX, tY, vX, bY, color)\n\tdrawLine(lX, hY, rX, hY, color)\n}\n","export const getRandomItem = (array) =>\n\tarray[Math.floor(Math.random() * array.length)]\n\nexport const getRandomBetween = (min, max) => {\n\treturn Math.floor(Math.random() * (max - min) + min)\n}\n\nexport const addAndRemoveClass = (el, classString, time) => {\n\tel.classList.add(classString)\n\tsetTimeout(() => el.classList.remove(classString), time)\n}\n\nexport const getRandomColorString = () => {\n\tconst letters = '0123456789ABCDEF'\n\tlet color = '#'\n\tfor (let i = 0; i < 6; i++) {\n\t\tcolor += letters[Math.floor(Math.random() * 16)]\n\t}\n\treturn color\n}\n\nexport const clamp = (val, min, max) => Math.min(Math.max(val, min), max)\n","import times from 'ramda/src/times'\nimport { getRandomItem, getRandomBetween } from '/src/logic/util'\nimport {\n\tdrawLine,\n\tdrawCurve,\n\tdrawRectangle,\n\tdrawEllipse,\n\tdrawCross,\n} from '/src/logic/drawShapes'\n\nexport const drawMouth = ({ mouthYTop, mouthYBottom, mouthLX, mouthRX }) => {\n\tconst mood = getRandomItem(['smile', 'frown', 'neutral', 'grimmace'])\n\tlet y = { top: mouthYTop, bot: mouthYBottom }\n\n\tswitch (mood) {\n\t\tcase 'neutral':\n\t\t\tdrawLine(mouthLX, y.top, mouthRX, y.top)\n\t\t\tbreak\n\t\tcase 'frown':\n\t\t\t// if frowning, flip top and bottom mouth y coords\n\t\t\ty = { top: mouthYBottom, bot: mouthYTop }\n\t\t\tdrawCurve(\n\t\t\t\tmouthLX,\n\t\t\t\ty.top,\n\t\t\t\tgetRandomBetween(mouthLX, mouthRX),\n\t\t\t\ty.bot,\n\t\t\t\tmouthRX,\n\t\t\t\ty.top,\n\t\t\t)\n\t\t\tbreak\n\t\tcase 'grimmace': {\n\t\t\ty.bot = Math.max(y.bot, y.top + 12)\n\t\t\tdrawRectangle(\n\t\t\t\tmouthLX,\n\t\t\t\ty.top,\n\t\t\t\tmouthRX - mouthLX,\n\t\t\t\ty.bot - y.top,\n\t\t\t\t'#000',\n\t\t\t\t'#fff',\n\t\t\t)\n\t\t\tconst teeth = getRandomBetween(2, 5)\n\t\t\tconst mouthLength = mouthRX - mouthLX\n\t\t\ttimes((n) => {\n\t\t\t\tif (n === 0) return\n\t\t\t\tdrawCross(\n\t\t\t\t\tmouthLX + (mouthLength / teeth) * n,\n\t\t\t\t\ty.top,\n\t\t\t\t\ty.bot,\n\t\t\t\t\tmouthLX,\n\t\t\t\t\t(y.top + y.bot) / 2,\n\t\t\t\t\tmouthRX,\n\t\t\t\t)\n\t\t\t}, teeth)\n\t\t\tbreak\n\t\t}\n\t\tdefault:\n\t\t\t// smile\n\t\t\tdrawCurve(\n\t\t\t\tmouthLX,\n\t\t\t\ty.top,\n\t\t\t\tgetRandomBetween(mouthLX, mouthRX),\n\t\t\t\ty.bot,\n\t\t\t\tmouthRX,\n\t\t\t\ty.top,\n\t\t\t)\n\t}\n\treturn y\n}\n\nexport const drawNose = ({ headCenter, noseTop, noseBottom, noseX }) => {\n\tconst shape = getRandomItem(['round', 'hook'])\n\n\tswitch (shape) {\n\t\tcase 'hook': {\n\t\t\tconst bridgeBottom =\n\t\t\t\tnoseTop + (noseBottom - noseTop) * (getRandomBetween(3, 7) / 10)\n\t\t\tdrawLine(headCenter, noseTop, headCenter, bridgeBottom)\n\t\t\tconst tipShift = noseX >= headCenter ? -1 : 1\n\t\t\tdrawCurve(\n\t\t\t\theadCenter + tipShift,\n\t\t\t\tbridgeBottom - 2,\n\t\t\t\tnoseX,\n\t\t\t\t(bridgeBottom + noseBottom) / 2,\n\t\t\t\theadCenter + tipShift,\n\t\t\t\tnoseBottom,\n\t\t\t)\n\t\t\tbreak\n\t\t}\n\t\tdefault:\n\t\t\t// round\n\t\t\tdrawCurve(\n\t\t\t\theadCenter,\n\t\t\t\tnoseTop,\n\t\t\t\tnoseX,\n\t\t\t\t(noseTop + noseBottom) / 2,\n\t\t\t\theadCenter,\n\t\t\t\tnoseBottom,\n\t\t\t)\n\t}\n}\n\nexport const drawPupils = ({\n\tpupilRX,\n\tpupilLX,\n\tpupilY,\n\tpupilXRadius,\n\tpupilYRadius,\n\tpupilColor,\n}) => {\n\tconst style = getRandomItem(['ellipse', 'square', 'cross'])\n\tswitch (style) {\n\t\tcase 'ellipse':\n\t\t\tdrawEllipse(\n\t\t\t\tpupilRX,\n\t\t\t\tpupilY,\n\t\t\t\tpupilXRadius,\n\t\t\t\tpupilYRadius,\n\t\t\t\t0,\n\t\t\t\t2 * Math.PI,\n\t\t\t\tpupilColor,\n\t\t\t\tpupilColor,\n\t\t\t)\n\t\t\tdrawEllipse(\n\t\t\t\tpupilLX,\n\t\t\t\tpupilY,\n\t\t\t\tpupilXRadius,\n\t\t\t\tpupilYRadius,\n\t\t\t\t0,\n\t\t\t\t2 * Math.PI,\n\t\t\t\tpupilColor,\n\t\t\t\tpupilColor,\n\t\t\t)\n\t\t\tbreak\n\t\tcase 'cross':\n\t\t\tdrawCross(\n\t\t\t\tpupilRX,\n\t\t\t\tpupilY - pupilYRadius,\n\t\t\t\tpupilY + pupilYRadius,\n\t\t\t\tpupilRX - pupilYRadius,\n\t\t\t\tpupilY,\n\t\t\t\tpupilRX + pupilYRadius,\n\t\t\t\tpupilColor,\n\t\t\t)\n\t\t\tdrawCross(\n\t\t\t\tpupilLX,\n\t\t\t\tpupilY - pupilYRadius,\n\t\t\t\tpupilY + pupilYRadius,\n\t\t\t\tpupilLX - pupilYRadius,\n\t\t\t\tpupilY,\n\t\t\t\tpupilLX + pupilYRadius,\n\t\t\t\tpupilColor,\n\t\t\t)\n\t\t\tbreak\n\t\tdefault:\n\t\t\t//square\n\t\t\tdrawRectangle(\n\t\t\t\tpupilRX - pupilXRadius,\n\t\t\t\tpupilY - pupilYRadius,\n\t\t\t\tpupilXRadius,\n\t\t\t\tpupilXRadius,\n\t\t\t\tpupilColor,\n\t\t\t\tpupilColor,\n\t\t\t)\n\t\t\tdrawRectangle(\n\t\t\t\tpupilLX,\n\t\t\t\tpupilY - pupilYRadius,\n\t\t\t\tpupilXRadius,\n\t\t\t\tpupilXRadius,\n\t\t\t\tpupilColor,\n\t\t\t\tpupilColor,\n\t\t\t)\n\t}\n}\n","// From https://www.usingmaths.com/senior_secondary/javascript/ellipseequation.php\nexport const getEllipsePoint = (\n\tknownPointData,\n\tunknownPointData,\n\themisphere = 'above',\n) => {\n\tconst [kCoord, kCenter, kAxis] = knownPointData\n\tconst [uCenter, uAxis] = unknownPointData\n\tconst t2 =\n\t\t(kAxis / uAxis) *\n\t\tMath.sqrt(Math.pow(uAxis, 2) - Math.pow(kCoord - kCenter, 2))\n\tif (hemisphere === 'above') {\n\t\treturn uCenter - t2\n\t} else {\n\t\treturn uCenter + t2\n\t}\n}\n","import times from 'ramda/src/times'\nimport { getCanvasSize, ctx, canvas } from '/src/logic/elements'\nimport { drawEllipse, drawLine } from '/src/logic/drawShapes'\nimport {\n\tgetRandomBetween,\n\tgetRandomColorString,\n\tgetRandomItem,\n} from '/src/logic/util'\nimport { drawMouth, drawNose, drawPupils } from '/src/logic/styles'\nimport { getEllipsePoint } from '/src/logic/math'\n\nconst getHead = () => {\n\tconst canvasSize = getCanvasSize()\n\tconst headRadiusX = Math.round(\n\t\tgetRandomBetween(canvasSize / 3.5, canvasSize / 2.5),\n\t)\n\tconst headRadiusY = Math.round(\n\t\tgetRandomBetween(canvasSize / 3.5, canvasSize / 2.5),\n\t)\n\tconst skinColor = getRandomColorString()\n\n\tdrawEllipse(\n\t\tcanvasSize / 2,\n\t\tcanvasSize / 2,\n\t\theadRadiusX,\n\t\theadRadiusY,\n\t\t0,\n\t\t2 * Math.PI,\n\t\tskinColor,\n\t\tskinColor,\n\t)\n\treturn {\n\t\tcanvasSize,\n\t\theadRadiusX,\n\t\theadRadiusY,\n\t\tskinColor,\n\t\theadCenter: canvasSize / 2,\n\t}\n}\n\nconst drawEyeEllipse = (x, y, rX, rY, color) =>\n\tdrawEllipse(x, y, rX, rY, 0, 2 * Math.PI, color, color)\nconst getEyes = ({ canvasSize, headRadiusX, headRadiusY, headCenter }) => {\n\t// Eyeballs\n\tconst eyeXRadius = getRandomBetween(headRadiusX / 8, headRadiusX / 4)\n\tconst eyeYRadius = getRandomBetween(headRadiusY / 8, headRadiusY / 4)\n\tconst eyeInnerBound = headCenter + eyeXRadius\n\tconst eyeOuterBound = headCenter + headRadiusX - eyeXRadius * 2\n\n\tconst eyeRX = getRandomBetween(eyeInnerBound, eyeOuterBound)\n\tconst eyeXOffset = eyeRX - headCenter\n\tconst maxEyeYOffset =\n\t\tgetEllipsePoint(\n\t\t\t[eyeRX + eyeXRadius, headCenter, headRadiusX],\n\t\t\t[headCenter, headRadiusY],\n\t\t) + eyeYRadius\n\tconst eyeLX = headCenter - eyeXOffset\n\tconst eyeY = getRandomBetween(canvasSize / 2, maxEyeYOffset)\n\tconst eyeYOffset = eyeY - headCenter\n\n\t// Draw eyeballs\n\tdrawEyeEllipse(eyeRX, eyeY, eyeXRadius, eyeYRadius, '#fff')\n\tdrawEyeEllipse(eyeLX, eyeY, eyeXRadius, eyeYRadius, '#fff')\n\n\t// Pupils\n\tconst pupilXRadius = getRandomBetween(eyeXRadius / 2, eyeXRadius / 1.5)\n\tconst pupilYRadius = getRandomBetween(eyeYRadius / 4, eyeYRadius / 2)\n\tconst pupilInnerBound = eyeRX - eyeXRadius + pupilXRadius\n\tconst pupilOutterBound = eyeRX + eyeXRadius - pupilYRadius\n\tconst pupilRX = getRandomBetween(pupilInnerBound, pupilOutterBound)\n\tconst pupilXOffset = pupilRX - headCenter\n\tconst pupilLX = headCenter - pupilXOffset\n\tconst pupilY = eyeY\n\tconst pupilYOffset = pupilY - headCenter\n\n\t// Draw Pupils\n\tconst pupilColor = getRandomColorString()\n\tdrawPupils({\n\t\tpupilRX,\n\t\tpupilLX,\n\t\tpupilY,\n\t\tpupilXRadius,\n\t\tpupilYRadius,\n\t\tpupilColor,\n\t})\n\n\tconst eyesClose = eyeXOffset - eyeXRadius <= 20\n\n\treturn {\n\t\teyeXOffset,\n\t\teyeXRadius,\n\t\teyeYOffset,\n\t\teyeYRadius,\n\t\tpupilXOffset,\n\t\tpupilXRadius,\n\t\tpupilYOffset,\n\t\tpupilYRadius,\n\t\tmaxEyeYOffset,\n\t\teyesClose,\n\t}\n}\n\nconst getMouth = ({ headRadiusX, headRadiusY, eyeYRadius, headCenter }) => {\n\tconst mouthPadding = 60\n\tconst mouthYTop = getRandomBetween(\n\t\theadCenter + eyeYRadius,\n\t\theadCenter + headRadiusY - mouthPadding,\n\t)\n\tconst mouthYBottom = getRandomBetween(\n\t\tmouthYTop,\n\t\theadCenter + headRadiusY - mouthPadding,\n\t)\n\tconst mouthXLMax =\n\t\tgetEllipsePoint(\n\t\t\t[mouthYTop, headCenter, headRadiusY],\n\t\t\t[headCenter, headRadiusX],\n\t\t) + mouthPadding\n\tlet mouthXRMax =\n\t\tgetEllipsePoint(\n\t\t\t[mouthYTop, headCenter, headRadiusY],\n\t\t\t[headCenter, headRadiusX],\n\t\t\t'below',\n\t\t) - mouthPadding\n\tconst mouthRX = getRandomBetween(headCenter, mouthXRMax)\n\tconst mouthLX = Math.min(headCenter - (mouthRX - headCenter), mouthRX - 20)\n\tconst y = drawMouth({ mouthYTop, mouthYBottom, mouthLX, mouthRX })\n\treturn {\n\t\tmouthLX,\n\t\tmouthRX,\n\t\tmouthXLMax,\n\t\tmouthXRMax,\n\t\tmouthTop: y.top,\n\t\tmouthBottom: y.bot,\n\t}\n}\n\nconst getNose = ({\n\theadCenter,\n\theadRadiusX,\n\theadRadiusY,\n\tmouthTop,\n\teyeYOffset,\n\teyeYRadius,\n\teyesClose,\n\teyeXOffset,\n\teyeXRadius,\n}) => {\n\tconst nosePadding = 20\n\n\tlet noseTop = headCenter + eyeYOffset\n\tif (eyesClose) {\n\t\tnoseTop = headCenter + eyeYRadius\n\t}\n\tlet noseBottom = getRandomBetween(\n\t\tnoseTop + 10,\n\t\tMath.min(noseTop + 80, mouthTop - 20),\n\t)\n\n\tif (noseTop - noseBottom < 20) {\n\t\tnoseTop = noseTop - 20\n\t}\n\n\tlet noseX = getRandomBetween(\n\t\theadCenter,\n\t\theadCenter + headRadiusX - nosePadding,\n\t)\n\tif (!eyesClose) {\n\t\tnoseX = Math.min(noseX, headCenter + eyeXOffset - eyeXRadius)\n\t}\n\tnoseX = Math.max(headCenter + 20, noseX)\n\tnoseX = getRandomItem([noseX, headCenter - (noseX - headCenter)])\n\n\tdrawNose({ headCenter, noseTop, noseBottom, noseX })\n\treturn { noseTop, noseBottom, noseX }\n}\n\nconst getHair = ({ headCenter, headRadiusY, headRadiusX }) => {\n\tconst hairColor = getRandomColorString()\n\tconst hairWidth = getRandomBetween(2, 10)\n\tconst hairDensity = Math.floor(headRadiusX / hairWidth)\n\tconst hairRoots = times((n) => {\n\t\treturn getEllipsePoint(\n\t\t\t[headCenter - hairWidth * n, headCenter, headRadiusX],\n\t\t\t[headCenter, headRadiusY],\n\t\t)\n\t}, hairDensity)\n\thairRoots.forEach((r, i) => {\n\t\tconst startingLX = headCenter - hairWidth * i\n\t\tdrawLine(\n\t\t\tstartingLX,\n\t\t\tr,\n\t\t\tstartingLX - hairWidth,\n\t\t\tr - getRandomBetween(2, 60),\n\t\t\thairColor,\n\t\t)\n\t\tconst startingRX = headCenter + hairWidth * i\n\t\tdrawLine(\n\t\t\tstartingRX,\n\t\t\tr,\n\t\t\tstartingRX + hairWidth,\n\t\t\tr - getRandomBetween(2, 60),\n\t\t\thairColor,\n\t\t)\n\t})\n}\n\nexport const createTheMan = () => {\n\tctx.clearRect(0, 0, canvas.width, canvas.height)\n\tlet faceProps = { ...getHead() }\n\tfaceProps = { ...faceProps, ...getEyes(faceProps) }\n\tfaceProps = { ...faceProps, ...getMouth(faceProps) }\n\tfaceProps = { ...faceProps, ...getNose(faceProps) }\n\tfaceProps = { ...faceProps, ...getHair(faceProps) }\n}\n","import { getRandomItem } from '/src/logic/util'\n\nexport const defaultNames = [\n\t'Billy Joel',\n\t'Neil Diamond',\n\t'Art Garfunkel',\n\t'Barry Manilow',\n\t'England Dan',\n\t'Chuck Mangione',\n]\n\n// START - NAME GENERATOR - START\nconst vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n\n// Weightings roughly taken from english letter frequency\n// http://pi.math.cornell.edu/~mec/2003-2004/cryptography/subs/frequencies.html\nconst weightedConsonants = [\n\t['b', 2],\n\t['c', 4],\n\t['d', 7],\n\t['f', 4],\n\t['g', 3],\n\t['h', 10],\n\t['j', 1],\n\t['k', 1],\n\t['l', 6],\n\t['m', 4],\n\t['n', 11],\n\t['p', 3],\n\t['q', 1],\n\t['r', 10],\n\t['s', 10],\n\t['t', 15],\n\t['v', 2],\n\t['w', 3],\n\t['x', 1],\n\t['z', 1],\n]\nconst consonants = weightedConsonants.map((c) => c[0])\nconst selectableConstants = []\n// @TODO This is a very bad way of handling weighted random letters\nweightedConsonants.forEach((c) => {\n\tfor (let i = 0; i < c[1]; i++) {\n\t\tselectableConstants.push(c[0])\n\t}\n})\n\nconst replaceLetter = (letter, optionArray) => {\n\tconst replacement = getRandomItem(optionArray)\n\tif (letter === letter.toUpperCase()) {\n\t\treturn replacement.toUpperCase()\n\t}\n\treturn replacement\n}\n\nexport const buildName = (templateName) => {\n\tconst letters = templateName.split('')\n\treturn letters\n\t\t.reduce((acc, cur, i, arr) => {\n\t\t\tlet letter = cur\n\t\t\tif (i && arr[i - 1] === cur) {\n\t\t\t\tletter = acc[i - 1]\n\t\t\t} else if (vowels.indexOf(cur.toLowerCase()) !== -1) {\n\t\t\t\tletter = replaceLetter(letter, vowels)\n\t\t\t} else if (consonants.indexOf(cur.toLowerCase()) !== -1) {\n\t\t\t\tletter = replaceLetter(letter, selectableConstants)\n\t\t\t}\n\t\t\treturn [...acc, letter]\n\t\t}, [])\n\t\t.join('')\n}\n// END - NAME GENERATOR - END\n","import { resizeCanvas, namePTag, nameForm, nameInput } from '/src/logic/elements'\nimport { createTheMan } from '/src/logic/face'\nimport { defaultNames, buildName } from '/src/logic/names'\nimport { getRandomItem } from '/src/logic/util'\n\nresizeCanvas()\ncreateTheMan()\nconst templateName = getRandomItem(defaultNames)\nconst name = buildName(templateName)\nnamePTag.textContent = name\n\nnameForm.addEventListener('submit', (e) => {\n\te.preventDefault()\n\tconst seed = nameInput.value\n\tlet name\n\tif (!seed) {\n\t\tname = buildName(getRandomItem(defaultNames))\n\t} else {\n\t\tname = buildName(seed)\n\t}\n\tnamePTag.textContent = name\n\tcreateTheMan()\n})"]}